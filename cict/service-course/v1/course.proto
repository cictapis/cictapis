syntax = "proto3";

package cict.service_course.v1;

option cc_enable_arenas = true;
option go_package = "github.com/cictapis/cict-auth/cict/service_course/v1;service_course";

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";

import "cict/common/v1/annotations.proto";
import "cict/common/v1/enum_mutate_operation.proto";
import "cict/common/v1/paginate.proto";
import "cict/service-course/v1/course_timetable_week.proto";
import "cict/service-course/v1/exam_schedule.proto";
import "cict/service-course/v1/exam_score.proto";

service CourseService {
  rpc MutateCourse(MutateCourseRequest) returns (MutateCourseResponse) {
    option (google.api.http) = {
      post: "/api/service_course/v1/course/mutate",
      body: "*"
    };
    option (common.v1.cict) = {
      crud_policy: ADMIN,
    };
  }

  rpc GetCourse(GetCourseRequest) returns (GetCourseResponse) {
    option (google.api.http) = {
      get: "/api/service_course/v1/course/get"
    };
    option (common.v1.cict) = {
      crud_policy: ANYONE,
      system_api_exporter: CICT_SERVICE_COURSE_COURSE_GET_COURSE,
    };
  }

  rpc ListCourse(ListCourseRequest) returns (ListCourseResponse) {
    option (google.api.http) = {
      get: "/api/service_course/v1/course/list"
    };
    option (common.v1.cict) = {
      crud_policy: ANYONE,
      system_api_exporter: CICT_SERVICE_COURSE_COURSE_LIST_COURSE,
    };
  }

  rpc RegisterCourse(RegisterCourseRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/service_course/v1/course/register",
      body: "*"
    };
    option (common.v1.cict) = {
      crud_policy: USER,
    };
  }
}

message MutateCourseRequest {
  common.v1.EnumMutateOperation.MutateOperation mutate_operation = 1;

  repeated MutateCourseOperation operations = 2;

  bool partial_failure = 3;

  google.protobuf.FieldMask update_mask = 4;
}

message MutateCourseOperation {
  Course course = 1;
}

message MutateCourseResponse {
  repeated uint64 mutated_ids = 1;
}

message GetCourseRequest {
  uint64 id = 1;
}

message GetCourseResponse {
  Course course = 1;
}

message ListCourseRequest {
  cict.common.v1.Paginate paginate = 1;
}

message ListCourseResponse {
  repeated Course courses = 1;
}

message RegisterCourseRequest {
  uint64 user_id = 1;

  uint64 course_id = 2;
}

message Course {
  // @gotags: gorm:"primaryKey"
  uint64 id = 1;

  // @gotags: gorm:"<-"
  string name = 2;

  // @gotags: gorm:"<-"
  string description = 3;

  // @gotags: gorm:"<-"
  string from_date = 4;

  // @gotags: gorm:"<-"
  string to_date = 5;

  // @gotags: gorm:"<-"
  uint32 capacity = 6;

  // @gotags: gorm:"<-"
  uint32 size = 7;

  // Belong to CourseField
  uint64 course_field_id = 8;

  // Has many relationships CourseTimetableWeek
  repeated CourseTimetableWeek course_timetable_weeks = 9;

  // Has many relationships ExamSchedule
  repeated ExamSchedule exam_schedules = 10;

  // Many to many relationship User
  // @gotags: gorm:"many2many:user_courses"
  repeated User users = 11;

  // @gotags: gorm:"autoUpdateTime:nano"
  int64 updated_at = 12;

  // @gotags: gorm:"autoCreateTime:nano"
  int64 created_at = 13;
}

message User {
  // @gotags: gorm:"primaryKey"
  uint64 id = 1;

  // Many to many relationships Course
  // @gotags: gorm:"many2many:user_courses"
  repeated Course courses = 2;

  // @gotags: gorm:"autoUpdateTime:nano"
  int64 updated_at = 3;

  // @gotags: gorm:"autoCreateTime:nano"
  int64 created_at = 4;
}
