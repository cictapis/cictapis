syntax = "proto3";

package cict.service_auth.v1;

option cc_enable_arenas = true;
option go_package = "github.com/cictapis/cict-auth/cict/service_auth/v1;service_auth";
option java_multiple_files = false;
option java_outer_classname = "SessionManager";
option java_package = "com.github.cictapis.cict_reporter.cict.serviceauth.v1";

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";

import "cict/common/v1/annotations.proto";
import "cict/common/v1/enum_mask_behavior.proto";
import "cict/service-auth/v1/role_accessibility.proto";
import "cict/service-auth/v1/session.proto";

// SessionManager is a class or module that is used to manage user sessions. It uses Redis to
// store and retrieve session information. The session manager ID for each user is generated by
// concatenating the string "SMID-" with the user ID, resulting in a unique identifier for each
// user session.
//
// The value associated with each session ID is an array of session IDs. This array contains all the session IDs that are associated
// with the given user ID. This is useful when a user has multiple devices or browsers and wants to access the same session data
// across all of them.
//
// SessionManager provides methods for creating and destroying sessions, as well as for retrieving and updating session data. It can
// also handle session expiration and cleanup, to ensure that sessions do not persist indefinitely and take up unnecessary resources.
service SessionManagerService {
  // Context send session_id, workspace_id, locale, scope
  rpc AuthenticateSession(AuthenticateSessionRequest) returns (AuthenticateSessionResponse) {
    option (google.api.http) = {
      post: "/api/service_auth/v1/session/authenticate_session",
      body: "*"
    };
    option (common.v1.cict) = {
      crud_policy: SYSTEM,
    };
  }

  rpc MutateSession (MutateSessionRequest) returns (MutateSessionResponse) {
    option (google.api.http) = {
      post: "/api/service_auth/v1/session_manager/mutate_session",
      body: "*"
    };
    option (common.v1.cict) = {
      crud_policy: SYSTEM,
    };
  }
}

message AuthenticateSessionRequest {
  common.v1.AnnotationsCictMethodOptions cict_annotations = 1;
}

message AuthenticateSessionResponse {
  Session session = 1;

  RoleAccessibility role_accessibility = 2;
}

message MutateSessionRequest {
  oneof operation {
    // Update all session with given fields to update
    MutateSessionUpdate update = 1;

    // Delete given session id
    MutateSessionDelete delete = 2;

    // Performance penalty when get necessary data from database
    MutateSessionGracefulCreate graceful_create = 3;

    // Update existing session by getting necessary data from database
    MutateSessionGracefulUpdate graceful_update = 4;

    // Delete all session of user
    MutateSessionGracefulDelete graceful_delete = 5;
  }
}

message MutateSessionUpdate {
  option (common.v1.default_mask) = {
    paths: ["academic_student_id","academic_teacher_id"]
  };

  common.v1.EnumMaskBehavior.MaskBehavior mask_behavior = 1;

  google.protobuf.FieldMask mask = 2;

  string user_id = 3;

  Session session = 4;
}

message MutateSessionDelete {
  string user_id = 1;

  string session_id = 2;
}

message MutateSessionGracefulCreate {
  string user_id = 1;

  string session_id = 2;
}

message MutateSessionGracefulUpdate {
  string user_id = 1;
}

message MutateSessionGracefulDelete {
  string user_id = 1;
}

message MutateSessionResponse {
  string session_id = 1;
}

message SessionManager {
  string id = 1;

  repeated string session_ids = 2;
}
