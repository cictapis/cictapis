syntax = "proto3";

package cict.service_auth.v1;

option cc_enable_arenas = true;
option go_package = "github.com/cictapis/cict-auth/cict/service_auth/v1;service_auth";

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";

import "cict/common/v1/annotations.proto";
import "cict/common/v1/paginate.proto";
import "cict/service-auth/v1/enum_authenticate_third_party.proto";
import "cict/service-auth/v1/enum_system_role.proto";
import "cict/service-auth/v1/enum_user_status.proto";

service UserService {
  option (common.v1.serviceName) = "users";

  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/auth/v1/user/login",
      body: "*"
    };
    option (common.v1.crudPolicy) = ANONYMOUS;
  }

  rpc Logout(LogoutRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/auth/v1/user/logout",
      body: "*"
    };
    option (common.v1.crudPolicy) = AUTH;
  }

  rpc MutateUser(MutateUserRequest) returns (MutateUserResponse) {
    option (google.api.http) = {
      post: "/api/auth/v1/user/mutate",
      body: "*"
    };
    option (common.v1.crudPolicy) = OWNER;
  }

  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/api/auth/v1/user/get"
    };
    option (common.v1.crudPolicy) = AUTH;
  }

  rpc ListUser(ListUserRequest) returns (ListUserResponse) {
    option (google.api.http) = {
      get: "/api/auth/v1/user/list"
    };
    option (common.v1.crudPolicy) = ADMIN;
  }
}

message LoginRequest {
  string email = 1;

  string password = 2;

  string validatePassword = 3;
}

message LoginResponse {
  User user = 1;

  string sessionId = 2;
}

message LogoutRequest {
  string sessionId = 1;
}

message MutateUserRequest {
  oneof operation {
    User create = 1;

    User update = 2;

    User delete = 3;
  }
}

message MutateUserResponse {
  uint64 mutatedId = 1;
}

message GetUserRequest {
  uint64 id = 1;
}

message GetUserResponse {
  User user = 1;
}

message ListUserRequest {
  cict.common.v1.PaginateRequest paginate = 1;
}

message ListUserResponse {
  repeated User users = 1;
}

message User {
  // @gotags: json:"id" gorm:"primaryKey"
  uint64 id = 1;

  // @gotags: json:"authenticateThirdParty" gorm:"<-"
  EnumAuthenticateThirdParty.AuthenticateThirdParty authenticateThirdParty = 2;

  // allow read and write
  //
  // @gotags: json:"gmailOrganization" gorm:"<-"
  string gmailOrganization = 3;

  // @gotags: json:"regisUsername" gorm:"<-"
  string regisUsername = 4;

  // @gotags: json:"regisPassword" gorm:"<-"
  string regisPassword = 5;

  // allow read and write
  //
  // @gotags: json:"name" gorm:"<-"
  string name = 6;

  // allow read and write
  //
  // @gotags: json:"avatar" gorm:"<-"
  string avatar = 7;

  // allow read and write
  //
  // @gotags: json:"systemRole" gorm:"<-"
  EnumSystemRole.SystemRole systemRole = 8;

  // @gotags: json:"userStatus" gorm:"<-"
  EnumUserStatus.UserStatus userStatus = 9;

  // @gotags: json:"updatedAt" gorm:"autoUpdateTime:nano"
  int64 updatedAt = 10;

  // @gotags: json:"createdAt" gorm:"autoCreateTime:nano"
  int64 createdAt = 11;

  // @gotags: json:"createdById"
  uint64 createdById = 12;

  // @gotags: json:"createdBy" gorm:"foreignkey:createdById"
  User createdBy = 13;

  // @gotags: json:"updatedById"
  uint64 updatedById = 14;

  // @gotags: json:"updatedBy" gorm:"foreignkey:updatedById"
  User updatedBy = 15;

  // @gotags: json:"ownedById"
  uint64 ownedById = 16;

  // @gotags: json:"ownedBy" gorm:"foreignkey:ownedById"
  User ownedBy = 17;
}
